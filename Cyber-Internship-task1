# Network Reconnaissance — Task 1

**Date:** Mon Oct 20 2025

**Repository:** `cyber-internship-task1`

## Objective

Perform basic network reconnaissance on the local network to discover open ports and services, analyze exposure, and identify potential security risks. Save scan outputs and evidence for reporting and submission.

---

## 1. Summary of actions performed

* Installed and used Nmap to scan the local subnet `192.168.1.0/24`.
* Captured the scan output to `scan_results.txt`.
* Optionally captured network traffic with a packet capture tool (e.g., tcpdump/Wireshark) while scanning.
* Analyzed open ports and mapped them to common services to assess risk and propose remediation.

**Nmap command used (exact):**

```
/usr/lib/nmap/nmap --privileged -sS -oN scan_results.txt 192.168.1.0/24
```

**Scan run timestamp:** Mon Oct 20 13:21:14 2025

---

## 2. Raw results (short form)

The full Nmap output is saved as `scan_results.txt` in this repository. Below is an extracted, human-readable summary of the hosts that responded and their notable ports:

| IP Address       | Open Ports / State                                 | Likely Service(s) / Notes                                                                                         |
| ---------------- | -------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| **192.168.1.x**  | 53 (open), 80 (open), 443 (open)                   | DNS, HTTP, HTTPS — likely the gateway/router UI or local DNS/resolver                                             |
| **192.168.1.x**  | 8008 (open), 8009 (open), 8443 (open), 9000 (open) | Alternate HTTP/HTTPS ports, AJP13 (8009), and a custom service on 9000 — likely a web app or management interface |
| **192.168.1.x**  | no open ports (all closed)                         | Host up, no services identified on default 1000 ports                                                             |
| **192.168.1.x**  | no open ports (all closed)                         | Host up, no services identified on default 1000 ports                                                             |
| **192.168.1.x**  | no open ports (all closed)                         | Host up, no services identified on default 1000 ports                                                             |
| **192.168.1.x** | 21 (filtered), 1719 (filtered), 1720 (filtered)    | FTP and H.323-related ports are filtered (firewall or device ignoring probes)                                     |
| **192.168.1.x** | all scanned ports filtered (no response)           | Likely protected by firewall or offline for port responses                                                        |
| **192.168.1.x** | 21 (filtered), 1719 (filtered), 1720 (filtered)    | Similar to .11 — FTP/H.323 related ports filtered                                                                 |
| **192.168.1.x** | no open ports (all closed)                         | Host up, no services identified on default 1000 ports                                                             |

> **Note on "filtered" vs "closed":**
>
> * **Closed (reset):** The host responded with a TCP RST indicating the port is reachable but no service is listening.
> * **Filtered (no response / ICMP):** Packets are being dropped or blocked (firewall, ACL, or device silently ignoring probes).

---

## 3. Explanation of observed services and why they matter

This section explains each observed port/service in plain language and what it can mean for security.

### 53 — DNS (Domain Name System)

* **What it is:** DNS resolves domain names to IP addresses. Home routers and DNS resolvers often listen on port 53.
* **Why it matters:** An exposed DNS resolver can be abused for DNS amplification attacks if it's an open resolver. Misconfigured DNS can leak internal hostnames or enable DNS cache poisoning risks.
* **What to check:** Is the resolver open to the internet? Does it recursively resolve external names? Are there outdated DNS server versions with known CVEs?

### 80 — HTTP (Unencrypted web traffic)

* **What it is:** Standard web server port for unencrypted HTTP.
* **Why it matters:** HTTP traffic is unencrypted — credentials or sensitive data could be exposed. Additionally, the web server may expose admin pages, default credentials, or vulnerable web applications.
* **What to check:** Is there an admin UI? Are default credentials in use? Is HTTPS available and enforced?

### 443 — HTTPS (TLS/SSL encrypted web traffic)

* **What it is:** Secure web server port; encrypted with TLS.
* **Why it matters:** HTTPS mitigates eavesdropping but can still be vulnerable if using weak TLS versions/ciphers or an outdated server software with known vulnerabilities.
* **What to check:** TLS version and cipher strength, certificate validity, and whether server software is up to date.

### 8008 / 8443 — Alternate HTTP/HTTPS ports

* **What they are:** Often used for web management interfaces, proxies, or application servers (e.g., device management UIs run on nonstandard ports).
* **Why it matters:** Management interfaces exposed on nonstandard ports are still discoverable and can be targeted. They may use weak authentication or be misconfigured.
* **What to check:** Authentication method, available functionality (e.g., admin controls), and exposure scope (local vs. internet).

### 8009 — AJP13 (Apache JServ Protocol)

* **What it is:** Protocol used to connect web servers (like Apache HTTPD) to application servers (like Tomcat).
* **Why it matters:** Exposed AJP endpoints have been abused in the past (e.g., JBoss/Tomcat vulnerabilities allow remote code execution when misconfigured). AJP should generally be bound to localhost or private, trusted networks.
* **What to check:** Is AJP bound to internal interfaces only? Is the service necessary?

### 9000 — Custom/service-specific listener ("cslistener" in Nmap)

* **What it is:** Port 9000 is commonly used by many applications (development servers, management consoles, proprietary services). Nmap labels it generically because it varies by vendor.
* **Why it matters:** Unknown services increase risk because their security posture is unknown; they may have default credentials, debug endpoints, or known CVEs.
* **What to check:** Identify the application process behind port 9000, check for authentication, and search vendor documentation for hardening.

### 21 — FTP (Filtered in scan)

* **What it is:** File Transfer Protocol historically used for transferring files (plaintext credentials by default).
* **Why it matters:** Plain FTP transmits credentials in cleartext. If used internally, prefer SFTP (SSH) or FTPS.
* **What to check:** If FTP is required; if so, disable anonymous access and prefer secure alternatives.

### 1719 / 1720 — H.323 (telephony signaling) (Filtered in scan)

* **What it is:** Ports associated with VoIP/H.323 call signaling and related services.
* **Why it matters:** VoIP infrastructure can be targeted for toll fraud, call interception, or DoS attacks. Filtered ports indicate some protection but still worth auditing.
* **What to check:** Are VoIP services intentionally exposed? Are they behind appropriate QoS and firewall rules?

---

## 4. Potential security risks (analysis)

This section links the scan findings to concrete risks and explains why each is important.

1. **Exposed management interfaces (192.168.1.2 on 8008/8443/9000):**

   * *Risk:* If these are administrative consoles, they may allow configuration changes, credential resets, or even remote command execution if vulnerable.
   * *Why it's bad:* Attackers who access a management UI can pivot to other infrastructure or create persistence.

2. **Open DNS/resolver on gateway (192.168.1.1:53):**

   * *Risk:* If misconfigured as an open resolver, the device could be abused for DNS amplification DDoS attacks or leak internal DNS data.

3. **Unencrypted HTTP (192.168.1.1:80):**

   * *Risk:* Sensitive information transmitted in cleartext; man-in-the-middle or session hijacking is possible on the LAN.

4. **AJP exposed (192.168.1.2:8009):**

   * *Risk:* Historically, AJP endpoints have been used to exploit web application servers remotely when not properly secured.

5. **Unknown service on 9000 (192.168.1.2:9000):**

   * *Risk:* Unknown services increase the attack surface. Without identification, it’s hard to know if it’s patched or configured securely.

6. **Filtered ports (21,1719,1720) on some hosts:**

   * *Risk:* "Filtered" means packets were dropped — indicates a firewall or service filtering. This is good, but filtering alone doesn’t guarantee that the service isn’t vulnerable from allowed networks.

---

## 5. Recommended mitigations and next steps (actionable)

Make these changes in order of priority and test after each change.

1. **Inventory & identify**

   * Determine which device corresponds to each IP (log into router admin or check DHCP leases). Identify the applications behind ports 8008/8443/9000.

2. **Restrict management interfaces**

   * If ports 8008/8443/9000 are admin consoles: restrict access to specific IPs, or move them behind a VPN.

3. **Disable or replace insecure protocols**

   * Replace FTP with SFTP/FTPS. Disable Telnet if present.

4. **Harden web services**

   * Enforce HTTPS (redirect HTTP→HTTPS), check TLS configuration, and renew/validate certificates.
   * Run `nmap -sV --script=vulners` (if allowed in lab) or use vulnerability scanners to identify known CVEs for service versions.

5. **Close unused ports**

   * Disable unnecessary services on devices. Use firewall rules to block inbound access from untrusted networks.

6. **Patch & update**

   * Ensure firmware and server software on the gateway and devices are up to date.

7. **Logging & monitoring**

   * Enable logging and set up alerts for unusual connection attempts or repeated auth failures.

8. **Documentation**

   * Record any changes made and keep `scan_results.txt` with timestamps for audit and comparison.

---

## 6. How to reproduce this scan (commands & tips)

Run the following commands as root/admin. Replace the network CIDR if your network is different.

```bash
# Basic TCP SYN scan and save text output
sudo nmap -sS -oN scan_results.txt 192.168.1.0/24

# Service and OS detection (takes longer)
sudo nmap -sS -sV -O -oN detailed_scan.txt 192.168.1.0/24

# UDP scan (slow; use if you need UDP services)
sudo nmap -sU -oN udp_scan.txt 192.168.1.0/24

# Capture packets with tcpdump while scanning (optional)
sudo tcpdump -i any -w pcap/capture.pcap
# then run the nmap scan in another terminal; stop tcpdump with Ctrl+C
```

**Wireshark tips:**

* Use capture filter for relevant traffic (e.g., `host 192.168.1.1` or `tcp port 80 or tcp port 443`).
* Inspect TLS handshakes for certificate details and protocol versions.

---

## 7. Files in this repo (what to include when you push)

```
README.md                 # This file
scan_results.txt          # Original Nmap output (raw)
detailed_scan.txt         # (optional) Extended Nmap output if you ran it
pcap/capture.pcap         # (optional) Packet capture file
screenshots/              # (optional) Wireshark or command screenshots
report.md                 # (optional) Brief report for submission
```

---

## 8. Suggested README or report appendix: Interview Q&A (short answers)

Include these short answers in an appendix of your submission; they match common interview questions for the exercise.

**Q: What is an open port?**
A: An open port is a network port where a service is listening and able to accept connections; it represents a potential entry point.

**Q: How does Nmap perform a TCP SYN scan?**
A: Nmap sends a SYN packet to a port; if it receives SYN/ACK the port is considered open (Nmap usually sends an RST to avoid completing the handshake). If it receives RST the port is closed. No response indicates filtered or blocked traffic.

**Q: What risks are associated with open ports?**
A: Open ports increase attack surface — exposed services can be exploited if vulnerable, misconfigured, or using weak credentials.

**Q: Difference between TCP and UDP scanning?**
A: TCP scanning leverages TCP handshake responses (SYN/SYN-ACK/RST) and is generally more reliable. UDP scanning sends datagrams without a handshake and relies on responses or ICMP unreachable messages; it's slower and less certain.

**Q: How can open ports be secured?**
A: Close unnecessary services, use firewalls to restrict access, update and patch software, enforce strong authentication, and place management interfaces behind VPNs.

**Q: What is a firewall's role regarding ports?**
A: A firewall controls which ports and IPs can communicate with a host, blocking unwanted or risky connections.

**Q: What is a port scan and why do attackers perform it?**
A: A port scan probes a host to discover listening services. Attackers use it to identify potential vulnerabilities or services to attack.

**Q: How does Wireshark complement port scanning?**
A: Wireshark captures actual packets so you can verify responses, examine protocol details, and investigate anomalies that a port scan alone won’t show.

---

## 9. Example commit message (use when pushing)

```
Add Nmap scan results and analysis
- scan_results.txt (raw output)
- README.md (analysis and remediation)
- pcap/capture.pcap (optional)
```

---

## 10. Final notes / ethics

* Only scan networks and devices you own or have explicit permission to test. Unauthorized scanning is illegal or against acceptable-use policies.
* If a scan causes disruption, stop immediately and inform the owner/admin.

---



